/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tp1Parcial.schema;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-09-18")
public class ConceptProperties implements org.apache.thrift.TBase<ConceptProperties, ConceptProperties._Fields>, java.io.Serializable, Cloneable, Comparable<ConceptProperties> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConceptProperties");

  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MODIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("modified", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NOTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("notation", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConceptPropertiesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConceptPropertiesTupleSchemeFactory();

  private java.lang.String label; // required
  private java.lang.String status; // required
  private int modified; // optional
  private java.lang.String notation; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LABEL((short)1, "label"),
    STATUS((short)2, "status"),
    MODIFIED((short)3, "modified"),
    NOTATION((short)4, "notation");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LABEL
          return LABEL;
        case 2: // STATUS
          return STATUS;
        case 3: // MODIFIED
          return MODIFIED;
        case 4: // NOTATION
          return NOTATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MODIFIED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MODIFIED,_Fields.NOTATION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODIFIED, new org.apache.thrift.meta_data.FieldMetaData("modified", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTATION, new org.apache.thrift.meta_data.FieldMetaData("notation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConceptProperties.class, metaDataMap);
  }

  public ConceptProperties() {
  }

  public ConceptProperties(
    java.lang.String label,
    java.lang.String status)
  {
    this();
    this.label = label;
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConceptProperties(ConceptProperties other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_label()) {
      this.label = other.label;
    }
    if (other.is_set_status()) {
      this.status = other.status;
    }
    this.modified = other.modified;
    if (other.is_set_notation()) {
      this.notation = other.notation;
    }
  }

  public ConceptProperties deepCopy() {
    return new ConceptProperties(this);
  }

  @Override
  public void clear() {
    this.label = null;
    this.status = null;
    set_modified_isSet(false);
    this.modified = 0;
    this.notation = null;
  }

  public java.lang.String get_label() {
    return this.label;
  }

  public void set_label(java.lang.String label) {
    this.label = label;
  }

  public void unset_label() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean is_set_label() {
    return this.label != null;
  }

  public void set_label_isSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  public java.lang.String get_status() {
    return this.status;
  }

  public void set_status(java.lang.String status) {
    this.status = status;
  }

  public void unset_status() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean is_set_status() {
    return this.status != null;
  }

  public void set_status_isSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int get_modified() {
    return this.modified;
  }

  public void set_modified(int modified) {
    this.modified = modified;
    set_modified_isSet(true);
  }

  public void unset_modified() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODIFIED_ISSET_ID);
  }

  /** Returns true if field modified is set (has been assigned a value) and false otherwise */
  public boolean is_set_modified() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODIFIED_ISSET_ID);
  }

  public void set_modified_isSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODIFIED_ISSET_ID, value);
  }

  public java.lang.String get_notation() {
    return this.notation;
  }

  public void set_notation(java.lang.String notation) {
    this.notation = notation;
  }

  public void unset_notation() {
    this.notation = null;
  }

  /** Returns true if field notation is set (has been assigned a value) and false otherwise */
  public boolean is_set_notation() {
    return this.notation != null;
  }

  public void set_notation_isSet(boolean value) {
    if (!value) {
      this.notation = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case LABEL:
      if (value == null) {
        unset_label();
      } else {
        set_label((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unset_status();
      } else {
        set_status((java.lang.String)value);
      }
      break;

    case MODIFIED:
      if (value == null) {
        unset_modified();
      } else {
        set_modified((java.lang.Integer)value);
      }
      break;

    case NOTATION:
      if (value == null) {
        unset_notation();
      } else {
        set_notation((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LABEL:
      return get_label();

    case STATUS:
      return get_status();

    case MODIFIED:
      return get_modified();

    case NOTATION:
      return get_notation();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LABEL:
      return is_set_label();
    case STATUS:
      return is_set_status();
    case MODIFIED:
      return is_set_modified();
    case NOTATION:
      return is_set_notation();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ConceptProperties)
      return this.equals((ConceptProperties)that);
    return false;
  }

  public boolean equals(ConceptProperties that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_label = true && this.is_set_label();
    boolean that_present_label = true && that.is_set_label();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_status = true && this.is_set_status();
    boolean that_present_status = true && that.is_set_status();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_modified = true && this.is_set_modified();
    boolean that_present_modified = true && that.is_set_modified();
    if (this_present_modified || that_present_modified) {
      if (!(this_present_modified && that_present_modified))
        return false;
      if (this.modified != that.modified)
        return false;
    }

    boolean this_present_notation = true && this.is_set_notation();
    boolean that_present_notation = true && that.is_set_notation();
    if (this_present_notation || that_present_notation) {
      if (!(this_present_notation && that_present_notation))
        return false;
      if (!this.notation.equals(that.notation))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((is_set_label()) ? 131071 : 524287);
    if (is_set_label())
      hashCode = hashCode * 8191 + label.hashCode();

    hashCode = hashCode * 8191 + ((is_set_status()) ? 131071 : 524287);
    if (is_set_status())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((is_set_modified()) ? 131071 : 524287);
    if (is_set_modified())
      hashCode = hashCode * 8191 + modified;

    hashCode = hashCode * 8191 + ((is_set_notation()) ? 131071 : 524287);
    if (is_set_notation())
      hashCode = hashCode * 8191 + notation.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ConceptProperties other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(is_set_label()).compareTo(other.is_set_label());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_label()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_status()).compareTo(other.is_set_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_modified()).compareTo(other.is_set_modified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_modified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modified, other.modified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_notation()).compareTo(other.is_set_notation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_notation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notation, other.notation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ConceptProperties(");
    boolean first = true;

    sb.append("label:");
    if (this.label == null) {
      sb.append("null");
    } else {
      sb.append(this.label);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (is_set_modified()) {
      if (!first) sb.append(", ");
      sb.append("modified:");
      sb.append(this.modified);
      first = false;
    }
    if (is_set_notation()) {
      if (!first) sb.append(", ");
      sb.append("notation:");
      if (this.notation == null) {
        sb.append("null");
      } else {
        sb.append(this.notation);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_label()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'label' is unset! Struct:" + toString());
    }

    if (!is_set_status()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConceptPropertiesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConceptPropertiesStandardScheme getScheme() {
      return new ConceptPropertiesStandardScheme();
    }
  }

  private static class ConceptPropertiesStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConceptProperties> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConceptProperties struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.set_label_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.set_status_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MODIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.modified = iprot.readI32();
              struct.set_modified_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NOTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notation = iprot.readString();
              struct.set_notation_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConceptProperties struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.label != null) {
        oprot.writeFieldBegin(LABEL_FIELD_DESC);
        oprot.writeString(struct.label);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_modified()) {
        oprot.writeFieldBegin(MODIFIED_FIELD_DESC);
        oprot.writeI32(struct.modified);
        oprot.writeFieldEnd();
      }
      if (struct.notation != null) {
        if (struct.is_set_notation()) {
          oprot.writeFieldBegin(NOTATION_FIELD_DESC);
          oprot.writeString(struct.notation);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConceptPropertiesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConceptPropertiesTupleScheme getScheme() {
      return new ConceptPropertiesTupleScheme();
    }
  }

  private static class ConceptPropertiesTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConceptProperties> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConceptProperties struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.label);
      oprot.writeString(struct.status);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.is_set_modified()) {
        optionals.set(0);
      }
      if (struct.is_set_notation()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.is_set_modified()) {
        oprot.writeI32(struct.modified);
      }
      if (struct.is_set_notation()) {
        oprot.writeString(struct.notation);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConceptProperties struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.label = iprot.readString();
      struct.set_label_isSet(true);
      struct.status = iprot.readString();
      struct.set_status_isSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.modified = iprot.readI32();
        struct.set_modified_isSet(true);
      }
      if (incoming.get(1)) {
        struct.notation = iprot.readString();
        struct.set_notation_isSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

