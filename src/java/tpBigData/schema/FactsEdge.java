/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tpBigData.schema;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class FactsEdge implements org.apache.thrift.TBase<FactsEdge, FactsEdge._Fields>, java.io.Serializable, Cloneable, Comparable<FactsEdge> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FactsEdge");

  private static final org.apache.thrift.protocol.TField INTERNET_USE_FIELD_DESC = new org.apache.thrift.protocol.TField("internetUse", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField INDIVIDUAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("individualType", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField GEOGRAPHY_FIELD_DESC = new org.apache.thrift.protocol.TField("geography", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField UNITS_FIELD_DESC = new org.apache.thrift.protocol.TField("units", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FactsEdgeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FactsEdgeTupleSchemeFactory());
  }

  private InternetUseId internetUse; // required
  private IndividualTypeId individualType; // required
  private GeographyId geography; // required
  private int year; // required
  private int units; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INTERNET_USE((short)1, "internetUse"),
    INDIVIDUAL_TYPE((short)2, "individualType"),
    GEOGRAPHY((short)3, "geography"),
    YEAR((short)4, "year"),
    UNITS((short)5, "units");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INTERNET_USE
          return INTERNET_USE;
        case 2: // INDIVIDUAL_TYPE
          return INDIVIDUAL_TYPE;
        case 3: // GEOGRAPHY
          return GEOGRAPHY;
        case 4: // YEAR
          return YEAR;
        case 5: // UNITS
          return UNITS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __YEAR_ISSET_ID = 0;
  private static final int __UNITS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INTERNET_USE, new org.apache.thrift.meta_data.FieldMetaData("internetUse", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternetUseId.class)));
    tmpMap.put(_Fields.INDIVIDUAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("individualType", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IndividualTypeId.class)));
    tmpMap.put(_Fields.GEOGRAPHY, new org.apache.thrift.meta_data.FieldMetaData("geography", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GeographyId.class)));
    tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNITS, new org.apache.thrift.meta_data.FieldMetaData("units", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FactsEdge.class, metaDataMap);
  }

  public FactsEdge() {
  }

  public FactsEdge(
    InternetUseId internetUse,
    IndividualTypeId individualType,
    GeographyId geography,
    int year,
    int units)
  {
    this();
    this.internetUse = internetUse;
    this.individualType = individualType;
    this.geography = geography;
    this.year = year;
    set_year_isSet(true);
    this.units = units;
    set_units_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FactsEdge(FactsEdge other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_internetUse()) {
      this.internetUse = new InternetUseId(other.internetUse);
    }
    if (other.is_set_individualType()) {
      this.individualType = new IndividualTypeId(other.individualType);
    }
    if (other.is_set_geography()) {
      this.geography = new GeographyId(other.geography);
    }
    this.year = other.year;
    this.units = other.units;
  }

  public FactsEdge deepCopy() {
    return new FactsEdge(this);
  }

  @Override
  public void clear() {
    this.internetUse = null;
    this.individualType = null;
    this.geography = null;
    set_year_isSet(false);
    this.year = 0;
    set_units_isSet(false);
    this.units = 0;
  }

  public InternetUseId get_internetUse() {
    return this.internetUse;
  }

  public void set_internetUse(InternetUseId internetUse) {
    this.internetUse = internetUse;
  }

  public void unset_internetUse() {
    this.internetUse = null;
  }

  /** Returns true if field internetUse is set (has been assigned a value) and false otherwise */
  public boolean is_set_internetUse() {
    return this.internetUse != null;
  }

  public void set_internetUse_isSet(boolean value) {
    if (!value) {
      this.internetUse = null;
    }
  }

  public IndividualTypeId get_individualType() {
    return this.individualType;
  }

  public void set_individualType(IndividualTypeId individualType) {
    this.individualType = individualType;
  }

  public void unset_individualType() {
    this.individualType = null;
  }

  /** Returns true if field individualType is set (has been assigned a value) and false otherwise */
  public boolean is_set_individualType() {
    return this.individualType != null;
  }

  public void set_individualType_isSet(boolean value) {
    if (!value) {
      this.individualType = null;
    }
  }

  public GeographyId get_geography() {
    return this.geography;
  }

  public void set_geography(GeographyId geography) {
    this.geography = geography;
  }

  public void unset_geography() {
    this.geography = null;
  }

  /** Returns true if field geography is set (has been assigned a value) and false otherwise */
  public boolean is_set_geography() {
    return this.geography != null;
  }

  public void set_geography_isSet(boolean value) {
    if (!value) {
      this.geography = null;
    }
  }

  public int get_year() {
    return this.year;
  }

  public void set_year(int year) {
    this.year = year;
    set_year_isSet(true);
  }

  public void unset_year() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  /** Returns true if field year is set (has been assigned a value) and false otherwise */
  public boolean is_set_year() {
    return EncodingUtils.testBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  public void set_year_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR_ISSET_ID, value);
  }

  public int get_units() {
    return this.units;
  }

  public void set_units(int units) {
    this.units = units;
    set_units_isSet(true);
  }

  public void unset_units() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNITS_ISSET_ID);
  }

  /** Returns true if field units is set (has been assigned a value) and false otherwise */
  public boolean is_set_units() {
    return EncodingUtils.testBit(__isset_bitfield, __UNITS_ISSET_ID);
  }

  public void set_units_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNITS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INTERNET_USE:
      if (value == null) {
        unset_internetUse();
      } else {
        set_internetUse((InternetUseId)value);
      }
      break;

    case INDIVIDUAL_TYPE:
      if (value == null) {
        unset_individualType();
      } else {
        set_individualType((IndividualTypeId)value);
      }
      break;

    case GEOGRAPHY:
      if (value == null) {
        unset_geography();
      } else {
        set_geography((GeographyId)value);
      }
      break;

    case YEAR:
      if (value == null) {
        unset_year();
      } else {
        set_year((Integer)value);
      }
      break;

    case UNITS:
      if (value == null) {
        unset_units();
      } else {
        set_units((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INTERNET_USE:
      return get_internetUse();

    case INDIVIDUAL_TYPE:
      return get_individualType();

    case GEOGRAPHY:
      return get_geography();

    case YEAR:
      return Integer.valueOf(get_year());

    case UNITS:
      return Integer.valueOf(get_units());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INTERNET_USE:
      return is_set_internetUse();
    case INDIVIDUAL_TYPE:
      return is_set_individualType();
    case GEOGRAPHY:
      return is_set_geography();
    case YEAR:
      return is_set_year();
    case UNITS:
      return is_set_units();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FactsEdge)
      return this.equals((FactsEdge)that);
    return false;
  }

  public boolean equals(FactsEdge that) {
    if (that == null)
      return false;

    boolean this_present_internetUse = true && this.is_set_internetUse();
    boolean that_present_internetUse = true && that.is_set_internetUse();
    if (this_present_internetUse || that_present_internetUse) {
      if (!(this_present_internetUse && that_present_internetUse))
        return false;
      if (!this.internetUse.equals(that.internetUse))
        return false;
    }

    boolean this_present_individualType = true && this.is_set_individualType();
    boolean that_present_individualType = true && that.is_set_individualType();
    if (this_present_individualType || that_present_individualType) {
      if (!(this_present_individualType && that_present_individualType))
        return false;
      if (!this.individualType.equals(that.individualType))
        return false;
    }

    boolean this_present_geography = true && this.is_set_geography();
    boolean that_present_geography = true && that.is_set_geography();
    if (this_present_geography || that_present_geography) {
      if (!(this_present_geography && that_present_geography))
        return false;
      if (!this.geography.equals(that.geography))
        return false;
    }

    boolean this_present_year = true;
    boolean that_present_year = true;
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (this.year != that.year)
        return false;
    }

    boolean this_present_units = true;
    boolean that_present_units = true;
    if (this_present_units || that_present_units) {
      if (!(this_present_units && that_present_units))
        return false;
      if (this.units != that.units)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_internetUse = true && (is_set_internetUse());
    builder.append(present_internetUse);
    if (present_internetUse)
      builder.append(internetUse);

    boolean present_individualType = true && (is_set_individualType());
    builder.append(present_individualType);
    if (present_individualType)
      builder.append(individualType);

    boolean present_geography = true && (is_set_geography());
    builder.append(present_geography);
    if (present_geography)
      builder.append(geography);

    boolean present_year = true;
    builder.append(present_year);
    if (present_year)
      builder.append(year);

    boolean present_units = true;
    builder.append(present_units);
    if (present_units)
      builder.append(units);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(FactsEdge other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_internetUse()).compareTo(other.is_set_internetUse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_internetUse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internetUse, other.internetUse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_individualType()).compareTo(other.is_set_individualType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_individualType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.individualType, other.individualType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_geography()).compareTo(other.is_set_geography());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_geography()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geography, other.geography);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_year()).compareTo(other.is_set_year());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_year()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_units()).compareTo(other.is_set_units());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_units()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.units, other.units);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FactsEdge(");
    boolean first = true;

    sb.append("internetUse:");
    if (this.internetUse == null) {
      sb.append("null");
    } else {
      sb.append(this.internetUse);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("individualType:");
    if (this.individualType == null) {
      sb.append("null");
    } else {
      sb.append(this.individualType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("geography:");
    if (this.geography == null) {
      sb.append("null");
    } else {
      sb.append(this.geography);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("year:");
    sb.append(this.year);
    first = false;
    if (!first) sb.append(", ");
    sb.append("units:");
    sb.append(this.units);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_internetUse()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'internetUse' is unset! Struct:" + toString());
    }

    if (!is_set_individualType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'individualType' is unset! Struct:" + toString());
    }

    if (!is_set_geography()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'geography' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FactsEdgeStandardSchemeFactory implements SchemeFactory {
    public FactsEdgeStandardScheme getScheme() {
      return new FactsEdgeStandardScheme();
    }
  }

  private static class FactsEdgeStandardScheme extends StandardScheme<FactsEdge> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FactsEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // INTERNET_USE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.internetUse = new InternetUseId();
              struct.internetUse.read(iprot);
              struct.set_internetUse_isSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INDIVIDUAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.individualType = new IndividualTypeId();
              struct.individualType.read(iprot);
              struct.set_individualType_isSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GEOGRAPHY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.geography = new GeographyId();
              struct.geography.read(iprot);
              struct.set_geography_isSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.year = iprot.readI32();
              struct.set_year_isSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UNITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.units = iprot.readI32();
              struct.set_units_isSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FactsEdge struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.internetUse != null) {
        oprot.writeFieldBegin(INTERNET_USE_FIELD_DESC);
        struct.internetUse.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.individualType != null) {
        oprot.writeFieldBegin(INDIVIDUAL_TYPE_FIELD_DESC);
        struct.individualType.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.geography != null) {
        oprot.writeFieldBegin(GEOGRAPHY_FIELD_DESC);
        struct.geography.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(YEAR_FIELD_DESC);
      oprot.writeI32(struct.year);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNITS_FIELD_DESC);
      oprot.writeI32(struct.units);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FactsEdgeTupleSchemeFactory implements SchemeFactory {
    public FactsEdgeTupleScheme getScheme() {
      return new FactsEdgeTupleScheme();
    }
  }

  private static class FactsEdgeTupleScheme extends TupleScheme<FactsEdge> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FactsEdge struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.internetUse.write(oprot);
      struct.individualType.write(oprot);
      struct.geography.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.is_set_year()) {
        optionals.set(0);
      }
      if (struct.is_set_units()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.is_set_year()) {
        oprot.writeI32(struct.year);
      }
      if (struct.is_set_units()) {
        oprot.writeI32(struct.units);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FactsEdge struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.internetUse = new InternetUseId();
      struct.internetUse.read(iprot);
      struct.set_internetUse_isSet(true);
      struct.individualType = new IndividualTypeId();
      struct.individualType.read(iprot);
      struct.set_individualType_isSet(true);
      struct.geography = new GeographyId();
      struct.geography.read(iprot);
      struct.set_geography_isSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.year = iprot.readI32();
        struct.set_year_isSet(true);
      }
      if (incoming.get(1)) {
        struct.units = iprot.readI32();
        struct.set_units_isSet(true);
      }
    }
  }

}

